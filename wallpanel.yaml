substitutions:
  sensor1: "sensor_habitacion_contact"
  sensor2: "taller_apertura_contact" 
  sensor3: "habitacion_last_updated"
  sensor4: "sensor_ventana_contact"
  sensor5: "ventilador"
  text1: "Habitacion" 
  text2: "Taller"
  text3: "Ventana"
  text4: "enchufe"
  type1: "binary_sensor"
  type2: "sensor"
  type3: "switch"
  img1: "imgPuerta"
  img2: "imgPuertaAbierta"
  img3: "imgVentana"
  img4: "imgVentanaAbierta"
  img5: "imgEnchufe"
  img6: "imgEnchufeOff"

globals:
  - id: historial_notificaciones
    type: std::vector<std::string>
    restore_value: false
    initial_value: 'std::vector<std::string>()'







esphome:
  name: wallpanel
  friendly_name: wallpanel

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

api:
  encryption:
    key: "HMujJJMlH/0sA2rpW7f1tN2T1dKaLd2XZTozhrEUOs4="

ota:
  - platform: esphome
    password: "4d606fe6aa722d3b90f86bf94cec0dfd"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Wallpanel Fallback Hotspot"
    password: "OkGCbimxCQVG"

captive_portal:
  

script:
  - id: undim_script
    mode: restart
    then:
      - light.turn_on: 
          id: Retroiluminacion
          brightness: 70%
      - delay: 15 sec
      # Verificar si la pantalla está encendida antes de bajar el brillo
      - if:
          condition:
            light.is_on: Retroiluminacion  # Verifica si Retroiluminacion está encendida
          then:
            # Si Retroiluminacion está encendida, esperar y bajar el brillo
            - light.turn_on: 
                id: Retroiluminacion
                brightness: 13%
            



binary_sensor:
  - platform: gpio
    pin: 33
    name: "Boton 1"
    id: boton_1
    device_class: motion
  - platform: gpio
    pin: 32
    name: "Boton 2"
    id: boton_2
    device_class: motion
    on_press:
      then:
        - lambda: |-
              if (id(boton_9).state) {
              id(historial_notificaciones).clear();
              ESP_LOGI("historial", "Historial limpiado por combinación de Botón 9 + Botón 8.");
              }
  - platform: gpio
    pin: 27
    name: "Boton 3"
    id: boton_3
    device_class: motion
  - platform: gpio
    pin: 34
    name: "Boton 4"
    id: boton_4
    device_class: motion
  - platform: gpio
    pin: 35
    name: "Boton 5"
    id: boton_5
    device_class: motion
  - platform: gpio
    pin: 2
    name: "Boton 6"
    id: boton_6
    device_class: motion
  - platform: gpio
    pin: 4
    name: "Boton 7"
    id: boton_7
    device_class: motion
  - platform: gpio
    pin: 25
    name: "Boton 8"
    id: boton_8
    device_class: motion
  - platform: gpio
    pin: 5
    name: "Boton 9"
    id: boton_9
    device_class: motion
    on_press:
      then:
        - display.page.show: notification_page
        - component.update: pantalla
    on_release:
      then:
        - display.page.show: main_page
        - component.update: pantalla
i2c:
  id: i2c_bus_intern
  sda: 18
  scl: 19
  scan: false

output:
  - platform: ledc
    pin: GPIO23
    id: tst_Backlight
light:
  - platform: monochromatic
    name: "Retroiluminacion"
    output: tst_Backlight    
    id: Retroiluminacion
    restore_mode: ALWAYS_ON
    on_turn_on:
      - script.execute: undim_script

touchscreen:
  - platform: ft63x6
    id: pantalla_touch
    i2c_id: i2c_bus_intern
    interrupt_pin: GPIO39
#    transform:
#      swap_xy: true
#      mirror_x: true
#    calibration:
#      x_min: 0
#      x_max: 319
#      y_min: 479
#      y_max: 0
    on_touch:
      - script.execute: undim_script
#      - lambda: |-
#            ESP_LOGI("cal", "x=%d, y=%d, x_raw=%d, y_raw=%0d",
#                touch.x,
#                touch.y,
#                touch.x_raw,
#                touch.y_raw
#                );     

spi:
  clk_pin: GPIO14
  mosi_pin: GPIO13
  miso_pin: GPIO12
display:
  - platform: ili9xxx
    invert_colors: false
    id: pantalla
    model: ST7796
    cs_pin: GPIO15
    dc_pin: GPIO21
    reset_pin: GPIO22
    rotation: 180
    pages:
      - id: main_page 
        lambda: |-
          it.print(60,20, id(fntSml), my_white, TextAlign::BOTTOM_CENTER, "${text1}");
          it.print(18,90, id(fntSml), my_white, id(ha_${sensor3}).state.c_str());
          if (id(ha_${sensor1}).state == "on") {
          it.image(20, 20, id(${img2}),my_yellow);
          } 
          else {
          it.image(20, 20, id(${img1}),my_white);
          }



          it.print(230,20, id(fntSml), my_white, TextAlign::BOTTOM_CENTER, "${text2}");
          if (id(ha_${sensor2}).state == "on") {
          it.image(190, 20, id(${img2}),my_yellow);
          } 
          else {
          it.image(190, 20, id(${img1}),my_white);
          }


          it.print(60,150, id(fntSml), my_white, TextAlign::BOTTOM_CENTER, "${text3}");
          if (id(ha_${sensor4}).state == "on") {
          it.image(20, 150, id(${img4}),my_yellow);
          } 
          else {
          it.image(20, 150, id(${img3}),my_white);
          }

          it.print(230,150, id(fntSml), my_white, TextAlign::BOTTOM_CENTER, "${text4}");
          if (id(ha_${sensor5}).state == "on") {
          it.image(190, 150, id(${img5}),my_yellow);
          } 
          else {
          it.image(190, 150, id(${img6}),my_white);
          }


          it.printf(20, 420, id(fntSml), "Consumo PC: %.0f W", id(consumo_pc).state);
          it.printf(20, 450, id(fntSml), "Luminosidad: %.0f lx", id(luminosidad).state);
           // Mostrar última notificación
          it.printf(20, 380, id(fntSml), my_white, "Ultima notificacion:");
          it.printf(20, 400, id(fntSml), my_white, id(notificacion_wallpanel).state.c_str());

      - id: notification_page
        lambda: |-
            // HISTORIAL DE NOTIFICACIONES
            it.print(120, 10, id(fntSml), my_white, TextAlign::TOP_CENTER, "Historial de Notificaciones");
            int y = 40;
            int max_notis = 10;
            int start = id(historial_notificaciones).size() > max_notis ? id(historial_notificaciones).size() - max_notis : 0;
            for (int i = start; i < id(historial_notificaciones).size(); i++) {
              it.printf(20, y, id(fntSml), my_white, "%s", id(historial_notificaciones)[i].c_str());
              y += 20;
            }

image:
  - file: mdi:door
    id: imgPuerta
    resize: 76x70
  - file: mdi:door-open
    id: imgPuertaAbierta
    resize: 76x70
  - file: mdi:window-closed
    id: imgVentana
    resize: 76x70
  - file: mdi:window-open
    id: imgVentanaAbierta
    resize: 76x70
  - file: mdi:power-plug
    id: imgEnchufe
    resize: 76x70
  - file: mdi:power-plug-off
    id: imgEnchufeOff
    resize: 76x70
text_sensor:
  - platform: homeassistant
    entity_id: ${type1}.${sensor1}
    id: ha_${sensor1}
    internal: True
  - platform: homeassistant
    entity_id: ${type1}.${sensor2}
    id: ha_${sensor2}
    internal: True
  - platform: homeassistant
    entity_id: ${type1}.${sensor4}
    id: ha_${sensor4}
    internal: True
  - platform: homeassistant
    entity_id: ${type2}.${sensor3}
    id: ha_${sensor3}
    internal: True
  - platform: homeassistant
    entity_id: ${type3}.${sensor5}
    id: ha_${sensor5}
    internal: True
  - platform: homeassistant
    entity_id: input_text.notificacion_wallpanel
    id: notificacion_wallpanel
    on_value:
      then:
        - lambda: |-
            if (id(historial_notificaciones).size() >= 10) {  // Máximo 10 notificaciones
              id(historial_notificaciones).erase(id(historial_notificaciones).begin());
            }
            id(historial_notificaciones).push_back(x);
sensor:
  - platform: homeassistant
    name: "Consumo PC"
    entity_id: "sensor.enchufe_pc_power"
    id: consumo_pc
  - platform: homeassistant
    name: "Luminosidad Cuarto"
    entity_id: "sensor.pir_dormitorio_illuminance"
    id: luminosidad

font:
  - file:
      type: gfonts
      family: "Roboto"
    id: fntXS
    size: 8
    glyphs: 0123456789:. °m
  - file:
      type: gfonts
      family: "Roboto"
    id: fntSml
    size: 18


color:
  - id: my_white
    red: 100%
    green: 100%
    blue: 100%
  - id: my_grey
    red: 50%
    green: 50%
    blue: 50%
  - id: my_yellow
    red: 75%
    green: 75%
    blue: 0%
